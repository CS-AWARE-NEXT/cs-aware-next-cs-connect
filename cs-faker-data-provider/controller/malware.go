package controller

import (
	"github.com/CS-AWARE-NEXT/cs-aware-next-cs-connect/cs-faker-data-provider/model"
	"github.com/gofiber/fiber/v2"
)

type MalwareController struct{}

func NewMalwareController() *MalwareController {
	return &MalwareController{}
}

func (mc *MalwareController) GetMalwares(c *fiber.Ctx) error {
	organizationId := c.Params("organizationId")

	tableData := model.PaginatedTableData{
		Columns: bundlePaginatedTableData.Columns,
		Rows:    []model.PaginatedTableRow{},
	}
	for _, bundle := range malwareMap[organizationId] {
		tableData.Rows = append(tableData.Rows, model.PaginatedTableRow(bundle))
	}
	return c.JSON(tableData)
}

func (mc *MalwareController) GetMalware(c *fiber.Ctx) error {
	return c.JSON(mc.getMalwareByID(c))
}

func (mc *MalwareController) getMalwareByID(c *fiber.Ctx) model.Malware {
	organizationId := c.Params("organizationId")
	malwareId := c.Params("malwareId")
	for _, malware := range malwareMap[organizationId] {
		if malware.ID == malwareId {
			return malware
		}
	}
	return model.Malware{}
}

var malwareMap = map[string][]model.Malware{
	"4": {
		{
			ID:          "malware--162d917e-766f-4611-b5d6-652791454fca",
			Name:        "x4z9arb backdoor",
			Description: "This malware attempts to download remote files after establishing a foothold as a backdoor.",
		},
	},
}

var malwarePaginatedTableData = model.PaginatedTableData{
	Columns: []model.PaginatedTableColumn{
		{
			Title: "Name",
		},
		{
			Title: "Description",
		},
	},
	Rows: []model.PaginatedTableRow{},
}
